{"version":3,"sources":["assets/images/Trollface.png","components/Header/Header.tsx","components/Loading/Loading.tsx","assets/images/rand.jpeg","sites/MemeGenerator/MemeGenerator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","src","problem","alt","override","css","Loading","isLoading","useState","loading","setLoading","useEffect","className","color","size","MemeGenerator","search","setSearch","topText","setTopText","bottomText","setBottomText","randomImage","setRandomImage","style","marginLeft","marginRight","justifyContent","onSubmit","e","preventDefault","fetch","then","res","blob","objectURL","URL","createObjectURL","setTimeout","type","placeholder","value","onChange","target","domtoimage","toJpeg","document","getElementById","quality","dataUrl","link","createElement","download","href","click","id","logo","App","maxWidth","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4OAAe,G,YAAA,IAA0B,uC,OCOnCA,EAAiC,WACnC,OACI,mCACI,qBAAKC,IAAKC,EAASC,IAAI,aAD3B,IAEI,+CACA,mD,6DCHNC,G,MAAWC,cAAH,iJAORC,EAAmC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,UAAgB,EAE3BC,mBAASD,GAFkB,mBAElDE,EAFkD,KAEzCC,EAFyC,KAUvD,OANAC,qBAAU,WACND,EAAWH,KACZ,CAACA,IAKA,qBAAKK,UAAU,gBAAf,SAII,cAAC,IAAD,CAAcC,MAAO,SAAUJ,QAASA,EAASJ,IAAKD,EAAWU,KAAM,SC/BpE,MAA0B,kCCUnCC,EAA+C,WAAO,IAAD,EAC3BP,mBAAS,IADkB,mBAChDQ,EADgD,KACxCC,EADwC,OAEzBT,mBAAS,IAFgB,mBAEhDU,EAFgD,KAEvCC,EAFuC,OAGnBX,mBAAS,IAHU,mBAGhDY,EAHgD,KAGpCC,EAHoC,OAIjBb,mBAAS,IAJQ,mBAIhDc,EAJgD,KAInCC,EAJmC,OAKzBf,oBAAS,GALgB,mBAKhDC,EALgD,KAKvCC,EALuC,KAuCvD,OACI,sBAAKc,MAAO,CAAEC,WAAY,OAAQC,YAAa,QAA/C,UACI,uBAAMd,UAAU,YAAYY,MAAO,CAAEG,eAAgB,UAAYC,SAtBpD,SAACC,GAClBA,EAAEC,iBACFpB,GAAW,GAKXqB,MAAM,wDAAD,OAAyDf,EAAzD,MACAgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACF,IAAIC,EAAYC,IAAIC,gBAAgBH,GACpCX,EAAeY,MAElBH,MAAK,WACFM,YAAW,WACP5B,GAAW,KACZ,SAMP,UACI,uBAAO6B,KAAK,OAAOC,YAAY,SAASC,MAAOzB,EAAQ0B,SAAU,SAAAb,GAAOZ,EAAUY,EAAEc,OAAOF,UAC3F,+CAEJ,uBAAM7B,UAAU,YAAYgB,SArCf,SAACC,GAClBA,EAAEC,iBACFc,IAAWC,OAAOC,SAASC,eAAe,YAA4B,CAAEC,QAAS,MAC5EhB,MAAK,SAAUiB,GACZ,IAAIC,EAAOJ,SAASK,cAAc,KAClCD,EAAKE,SAAW,gBAChBF,EAAKG,KAAOJ,EACZC,EAAKI,YA8BT,UACI,uBAAOf,KAAK,OAAOC,YAAY,MAAMC,MAAOvB,EAASwB,SAAU,SAAAb,GAAC,OAAIV,EAAWU,EAAEc,OAAOF,UACxF,uBAAOF,KAAK,OAAOC,YAAY,SAASC,MAAOrB,EAAYsB,SAAU,SAAAb,GAAC,OAAIR,EAAcQ,EAAEc,OAAOF,UACjG,iDAEJ,sBAAK7B,UAAU,OAAO2C,GAAG,WAAzB,UACI,qBAAKtD,IAAmB,KAAdqB,EAAkBkC,EAAKlC,EAAanB,IAAI,KADtD,IAEI,oBAAIS,UAAU,MAAd,SAAqBM,IACrB,oBAAIN,UAAU,SAAd,SAAwBQ,OAG5B,cAAC,EAAD,CAASb,UAAWE,QClDjBgD,MAXf,WACE,OACE,gCACC,cAAC,EAAD,IACA,qBAAKjC,MAAO,CAACkC,SAAS,QAASC,OAAO,UAAtC,SACA,cAAC,EAAD,UCIUC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASC,eAAe,SAM1Ba,M","file":"static/js/main.9463f484.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Trollface.c371feba.png\";","import React from 'react';\nimport problem from './../../assets/images/Trollface.png';\n\nexport type IHeaderProps = {\n\n}\n\nconst Header: React.FC<IHeaderProps> = () => {\n    return (\n        <header>\n            <img src={problem} alt=\"Problem?\" /> {/* http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png */}\n            <p>Meme Generator</p>\n            <small> Beni Â©</small>\n        </header>\n    );\n}\n\nexport { Header };","import React, { useEffect, useState } from 'react';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport { css } from \"@emotion/react\";\nimport './LoadingStyle.css';\n\nexport type ILoadingProps = {\nisLoading:boolean;\n}\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  box-shadow: rgb(255 255 255 / 20%) 0px 3px 29px 0px;\n`;\n\nconst Loading: React.FC<ILoadingProps> = ({isLoading }) => {\n\n    let [loading, setLoading] = useState(isLoading);\n\n    useEffect(() => {\n        setLoading(isLoading)\n    }, [isLoading]);\n\n    //let [color, setColor] = useState(\"yellow\");\n\n    return (\n        <div className=\"sweet-loading\">\n            {/*   <button onClick={() => setLoading(!loading)}>Toggle Loader</button>\n            <input value={color} onChange={(input) => setColor(input.target.value)} placeholder=\"Color of the loader\" /> */}\n\n            <PacmanLoader color={\"yellow\"} loading={loading} css={override}  size={100} />\n        </div>\n    );\n}\n\nexport { Loading };","export default __webpack_public_path__ + \"static/media/rand.0757221b.jpeg\";","import React, {  useState } from 'react';\nimport './../../Styles/globstyle.css';\nimport domtoimage from 'dom-to-image';\nimport { Loading } from '../../components/Loading/Loading';\nimport logo from './../../assets/images/rand.jpeg';\n\nexport type IMemeGeneratorProps = {\n\n}\n\nconst MemeGenerator: React.FC<IMemeGeneratorProps> = () => {\n    const [search, setSearch] = useState(\"\");\n    const [topText, setTopText] = useState(\"\");\n    const [bottomText, setBottomText] = useState(\"\");\n    const [randomImage, setRandomImage] = useState(\"\"); //http://urlme.me/rand\n    const [loading, setLoading] = useState(false);\n\n\n    const handleSubmit = (e: any) => {\n        e.preventDefault();     // don't refresh the page \n        domtoimage.toJpeg(document.getElementById('memeForm') as HTMLElement, { quality: 0.95 })\n            .then(function (dataUrl) {\n                var link = document.createElement('a');\n                link.download = 'beniMeme.jpeg';\n                link.href = dataUrl;\n                link.click();\n            });\n    }\n\n    const handleSearch = (e: any) => {\n        e.preventDefault();\n        setLoading(true);\n        generateImage();\n    }\n\n    function generateImage() {\n        fetch(`https://cors-proxy404.herokuapp.com/https://urlme.me/${search}/`)\n            .then(res => res.blob()) // Gets the response and returns it as a blob\n            .then(blob => {\n                let objectURL = URL.createObjectURL(blob);\n                setRandomImage(objectURL)\n            })\n            .then(() => {\n                setTimeout(() => {\n                    setLoading(false);\n                }, 1000);\n            })\n    }\n\n    return (\n        <div style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>\n            <form className=\"meme-form\" style={{ justifyContent: \"normal\" }} onSubmit={handleSearch}>\n                <input type=\"text\" placeholder=\"Search\" value={search} onChange={e => { setSearch(e.target.value) }} />\n                <button >Search</button>\n            </form>\n            <form className=\"meme-form\" onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Top\" value={topText} onChange={e => setTopText(e.target.value)} />\n                <input type=\"text\" placeholder=\"Bottom\" value={bottomText} onChange={e => setBottomText(e.target.value)} />\n                <button>Download</button>\n            </form>\n            <div className=\"meme\" id=\"memeForm\">\n                <img src={randomImage===\"\"? logo:randomImage} alt=\"\" /> {/* {randomImage} */}\n                <h2 className=\"top\">{topText}</h2>\n                <h2 className=\"bottom\">{bottomText}</h2>\n            </div>\n\n            <Loading isLoading={loading} />\n        </div>\n    );\n}\n\nexport { MemeGenerator };","\nimport './App.css';\nimport { Header } from './components/Header/Header';\nimport { MemeGenerator } from './sites/MemeGenerator/MemeGenerator';\n\nfunction App() {\n  return (\n    <div >\n     <Header />\n     <div style={{maxWidth:'700px', margin:'0 auto'}}>\n     <MemeGenerator />\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}