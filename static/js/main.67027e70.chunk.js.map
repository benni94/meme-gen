{"version":3,"sources":["assets/images/Trollface.png","components/Header/Header.tsx","components/Loading/Loading.tsx","assets/images/rand.jpeg","components/SearchBar/Searchbar.tsx","sites/MemeGenerator/MemeGenerator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","src","problem","alt","override","css","Loading","isLoading","useState","loading","setLoading","useEffect","className","color","size","Searchbar","getData","setData","items","setItems","placeholder","onSearch","string","results","onHover","result","onSelect","item","onFocus","autoFocus","formatResult","styling","MemeGenerator","topText","setTopText","bottomText","setBottomText","randomImage","setRandomImage","allMemeImgs","setAllMemeImgs","fetch","then","response","json","memes","data","map","box_count","height","id","Number","name","url","width","setTimeout","handleSubmit","e","preventDefault","domtoimage","toJpeg","document","getElementById","quality","dataUrl","link","createElement","download","href","click","style","marginLeft","marginRight","event","onSubmit","type","value","onChange","target","Button","variant","onClick","logo","App","maxWidth","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.67027e70.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Trollface.c371feba.png\";","import React from 'react';\nimport problem from './../../assets/images/Trollface.png';\n\nexport type IHeaderProps = {\n\n}\n\nconst Header: React.FC<IHeaderProps> = () => {\n    return (\n        <header>\n            <img src={problem} alt=\"Problem?\" /> {/* http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png */}\n            <p>Meme Generator</p>\n            <small> Beni Â©</small>\n        </header>\n    );\n}\n\nexport { Header };","import React, { useEffect, useState } from 'react';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport { css } from \"@emotion/react\";\nimport './LoadingStyle.css';\n\nexport type ILoadingProps = {\nisLoading:boolean;\n}\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  box-shadow: rgb(255 255 255 / 20%) 0px 3px 29px 0px;\n`;\n\nconst Loading: React.FC<ILoadingProps> = ({isLoading }) => {\n\n    let [loading, setLoading] = useState(isLoading);\n\n    useEffect(() => {\n        setLoading(isLoading)\n    }, [isLoading]);\n\n    //let [color, setColor] = useState(\"yellow\");\n\n    return (\n        <div className=\"sweet-loading\">\n            {/*   <button onClick={() => setLoading(!loading)}>Toggle Loader</button>\n            <input value={color} onChange={(input) => setColor(input.target.value)} placeholder=\"Color of the loader\" /> */}\n\n            <PacmanLoader color={\"yellow\"} loading={loading} css={override}  size={100} />\n        </div>\n    );\n}\n\nexport { Loading };","export default __webpack_public_path__ + \"static/media/rand.0757221b.jpeg\";","import React, { useEffect, useState } from 'react';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\nimport './SearchStyle.css'\n\nexport type ISearchbarProps = {\n    getData: any;\n    setData: (string) => void;\n}\n\nconst Searchbar: React.FC<ISearchbarProps> = ({ getData, setData }) => {\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        setItems(getData);\n    }, [getData]);\n\n\n    const handleOnSearch = (string, results) => {\n        // onSearch will have as the first callback parameter\n        // the string searched and for the second the results.\n    }\n\n    const handleOnHover = (result) => {\n        // the item hovered\n    }\n\n    const handleOnSelect = (item) => {\n        // the item selected\n        setData(item);\n    }\n\n    const handleOnFocus = () => {\n       // console.log('Focused')\n    }\n\n    const formatResult = (item) => {\n        return item;\n        // return (<p dangerouslySetInnerHTML={{__html: '<strong>'+item+'</strong>'}}></p>); //To format result as html\n    }\n\n\n    return (\n        <div>\n            <ReactSearchAutocomplete\n                placeholder=\"Search\"\n                items={items}\n                onSearch={handleOnSearch}\n                onHover={handleOnHover}\n                onSelect={handleOnSelect}\n                onFocus={handleOnFocus}\n                autoFocus\n                formatResult={formatResult}\n                styling={\n                    {\n                        \"lineColor\": \"#48EDDD\",\n                        \"iconColor\": \"#48EDDD\",\n                        \"borderRadius\": \"4px\",\n                        \"boxShadow\": \"none\",\n                        \"zIndex\":\"2\",\n                        \"fontSize\":\"x-large\",\n                        \"fontFamily\": \"VT323, monospace\"\n                    }\n                }\n            />\n        </div>\n    );\n}\n\nexport { Searchbar };","import React, { useEffect, useState } from 'react';\nimport './../../Styles/globstyle.css';\nimport domtoimage from 'dom-to-image';\nimport { Loading } from '../../components/Loading/Loading';\nimport logo from './../../assets/images/rand.jpeg';\nimport { Searchbar } from '../../components/SearchBar/Searchbar';\nimport { Button } from '@mui/material';\n\nexport type IMemeGeneratorProps = {\n\n}\n\n\nconst MemeGenerator: React.FC<IMemeGeneratorProps> = () => {\n    const [topText, setTopText] = useState(\"\");\n    const [bottomText, setBottomText] = useState(\"\");\n    const [randomImage, setRandomImage] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n\n    const [allMemeImgs, setAllMemeImgs] = useState([]);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                let memes = response.data.memes.map((data: any) => {\n                    return {\n                        box_count: data.box_count,\n                        height: data.height,\n                        id: Number(data.id),\n                        name: data.name,\n                        url: data.url,\n                        width: data.width\n                    }\n                })\n                setAllMemeImgs(memes);\n                setTimeout(() => {\n                    setLoading(false);\n\n                }, 1000);\n            })\n    }, []);\n\n\n    const handleSubmit = (e: any) => {\n        e.preventDefault();    \n        domtoimage.toJpeg(document.getElementById('memeForm') as HTMLElement, { quality: 0.95 })\n            .then(function (dataUrl) {\n                var link = document.createElement('a');\n                link.download = 'beniMeme.jpeg';\n                link.href = dataUrl;\n                link.click();\n            });\n    }\n\n    function getSearch(event) {\n        setRandomImage(event.url)\n    }\n\n    return (\n\n        <div style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>\n\n            <br />\n            <br />\n            <Searchbar getData={allMemeImgs} setData={getSearch} />\n        <br />\n            <form className=\"meme-form\" onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Top\" value={topText} onChange={e => setTopText(e.target.value)} />\n                <input type=\"text\" placeholder=\"Bottom\" value={bottomText} onChange={e => setBottomText(e.target.value)} />\n                <Button variant=\"contained\" onClick={handleSubmit}>Download</Button>\n            </form>\n\n            <div className=\"meme\" id=\"memeForm\">\n                <img src={randomImage === \"\" ? logo : randomImage} alt=\"\" /> {/* {randomImage} */}\n                <h2 className=\"top\">{topText}</h2>\n                <h2 className=\"bottom\">{bottomText}</h2>\n            </div>\n            <br />\n            <Loading isLoading={loading} />\n        </div>\n    );\n}\n\nexport { MemeGenerator };","\nimport './App.css';\nimport { Header } from './components/Header/Header';\nimport { MemeGenerator } from './sites/MemeGenerator/MemeGenerator';\n\nfunction App() {\n  return (\n    <div >\n     <Header />\n     <div style={{maxWidth:'700px', margin:'0 auto'}}>\n     <MemeGenerator />\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}