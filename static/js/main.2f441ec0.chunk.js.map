{"version":3,"sources":["assets/images/Trollface.png","components/Header/Header.tsx","components/Loading/Loading.tsx","assets/images/rand.jpeg","components/SearchBar/Searchbar.tsx","services/BlockScroll/UseScrollBlock.ts","components/TextMove/TextMove.tsx","components/DragDropImg/DragDropImg.tsx","sites/MemeGenerator/MemeGenerator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","src","problem","alt","override","css","Loading","isLoading","useState","loading","setLoading","useEffect","className","color","size","Searchbar","getData","setData","items","setItems","placeholder","onSelect","item","onFocus","autoFocus","formatResult","styling","safeDocument","document","TextMove","previousTouch","inputText","startPosition","pressed","setPressed","x","y","position","setPosition","ref","useRef","text","setText","scrollBlocked","html","documentElement","body","style","current","undefined","scrollBarWidth","window","innerWidth","clientWidth","bodyPaddingRight","parseInt","getComputedStyle","getPropertyValue","overflow","paddingRight","useScrollBlock","blockScroll","allowScroll","minus","offset","clientHeight","transform","onMouseMove","event","movementX","movementY","touch","touches","pageX","pageY","onTouchStart","onTouchEnd","onTouchMove","onMouseDown","onMouseUp","onMouseLeave","DragDropImg","loadImg","type","onChange","e","URL","createObjectURL","target","files","padding","MemeGenerator","topText","setTopText","bottomText","setBottomText","randomImage","setRandomImage","allMemeImgs","setAllMemeImgs","parentX","setparentX","parentY","setparentY","fetch","then","response","json","memes","data","map","box_count","height","id","Number","name","url","width","setTimeout","marginLeft","marginRight","onSubmit","preventDefault","domtoimage","toJpeg","getElementById","quality","dataUrl","link","createElement","download","href","click","value","Button","variant","el","getBoundingClientRect","logo","getImg","App","maxWidth","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2f441ec0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Trollface.c371feba.png\";","import React from 'react';\nimport problem from './../../assets/images/Trollface.png';\n\nexport type IHeaderProps = {\n\n}\n\nconst Header: React.FC<IHeaderProps> = () => {\n    return (\n        <header>\n            <img src={problem} alt=\"Problem?\" /> {/* http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png */}\n            <p>Meme Generator</p>\n            <small> Beni Â©</small>\n        </header>\n    );\n}\n\nexport { Header };","import React, { useEffect, useState } from 'react';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport { css } from \"@emotion/react\";\nimport './LoadingStyle.css';\n\nexport type ILoadingProps = {\nisLoading:boolean;\n}\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  box-shadow: rgb(255 255 255 / 20%) 0px 3px 29px 0px;\n`;\n\nconst Loading: React.FC<ILoadingProps> = ({isLoading }) => {\n\n    const [loading, setLoading] = useState(isLoading);\n\n    useEffect(() => {\n        setLoading(isLoading)\n    }, [isLoading]);\n\n    //let [color, setColor] = useState(\"yellow\");\n\n    return (\n        <div className=\"sweet-loading\">\n            {/*   <button onClick={() => setLoading(!loading)}>Toggle Loader</button>\n            <input value={color} onChange={(input) => setColor(input.target.value)} placeholder=\"Color of the loader\" /> */}\n\n            <PacmanLoader color={\"yellow\"} loading={loading} css={override}  size={100} />\n        </div>\n    );\n}\n\nexport { Loading };","export default __webpack_public_path__ + \"static/media/rand.0757221b.jpeg\";","import React, { useEffect, useState } from 'react';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\nimport './SearchStyle.css'\n\nexport type ISearchbarProps = {\n    getData: any;\n    setData: (string) => void;\n}\n\nconst Searchbar: React.FC<ISearchbarProps> = ({ getData, setData }) => {\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        setItems(getData);\n    }, [getData]);\n\n\n    /*     const handleOnSearch = (string, results) => {\n            // onSearch will have as the first callback parameter\n            // the string searched and for the second the results.\n        } */\n\n    /* const handleOnHover = (result) => {\n        // the item hovered\n    } */\n\n    const handleOnSelect = (item) => {\n        // the item selected\n        setData(item);\n    }\n\n    const handleOnFocus = () => {\n        // console.log('Focused')\n    }\n\n    const formatResult = (item) => {\n        return item;\n        // return (<p dangerouslySetInnerHTML={{__html: '<strong>'+item+'</strong>'}}></p>); //To format result as html\n    }\n\n\n    return (\n        <div>\n            {/* \n             onSearch={handleOnSearch}\n             onHover={handleOnHover}\n            */}\n            <ReactSearchAutocomplete\n                placeholder=\"Search\"\n                items={items}\n\n                onSelect={handleOnSelect}\n                onFocus={handleOnFocus}\n                autoFocus\n                formatResult={formatResult}\n                styling={\n                    {\n                        \"lineColor\": \"#48EDDD\",\n                        \"iconColor\": \"#48EDDD\",\n                        \"borderRadius\": \"4px\",\n                        \"boxShadow\": \"none\",\n                        \"zIndex\": \"4\",\n                        \"fontSize\": \"x-large\",\n                        \"fontFamily\": \"VT323, monospace\"\n                    }\n                }\n            />\n        </div>\n    );\n}\n\nexport { Searchbar };","import { useRef } from 'react';\n\nconst safeDocument: Document = document;\n\n/**\n * Usage:\n * const [blockScroll, allowScroll] = useScrollBlock();\n */\nexport const useScrollBlock = (): [() => void, () => void] => {\n\tconst scrollBlocked = useRef(false);\n\tconst html = safeDocument.documentElement;\n\tconst { body } = safeDocument;\n\n\tconst blockScroll = (): void => {\n\t\tif (!body || !body.style || scrollBlocked.current) \n            return;\n        if (document === undefined)\n            return;\n\n\t\tconst scrollBarWidth = window.innerWidth - html.clientWidth;\n\t\tconst bodyPaddingRight = parseInt(window.getComputedStyle(body).getPropertyValue('padding-right')) || 0;\n\n\t\t/**\n\t\t * 1. Fixes a bug in iOS and desktop Safari whereby setting\n\t\t *    `overflow: hidden` on the html/body does not prevent scrolling.\n\t\t * 2. Fixes a bug in desktop Safari where `overflowY` does not prevent\n\t\t *    scroll if an `overflow-x` style is also applied to the body.\n\t\t */\n\t\thtml.style.position = 'relative'; /* [1] */\n\t\thtml.style.overflow = 'hidden'; /* [2] */\n\t\tbody.style.position = 'relative'; /* [1] */\n\t\tbody.style.overflow = 'hidden'; /* [2] */\n\t\tbody.style.paddingRight = `${bodyPaddingRight + scrollBarWidth}px`;\n\n\t\tscrollBlocked.current = true;\n\t};\n\n\tconst allowScroll = (): void => {\n\t\tif (!body || !body.style || !scrollBlocked.current) return;\n\n\t\thtml.style.position = '';\n\t\thtml.style.overflow = '';\n\t\tbody.style.position = '';\n\t\tbody.style.overflow = '';\n\t\tbody.style.paddingRight = '';\n\n\t\tscrollBlocked.current = false;\n\t};\n\n\treturn [blockScroll, allowScroll];\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport './TextMoveStyle.css';\nimport { useScrollBlock } from './../../services/BlockScroll/UseScrollBlock';\n\n\ninterface IPos {\n    x: number;\n    y: number;\n}\n\nexport type ITextMoveProps = {\n    inputText: string;\n    startPosition: IPos;\n}\n\n\nconst TextMove: React.FC<ITextMoveProps> = ({ inputText, startPosition }) => {\n\n    const [pressed, setPressed] = useState(false)\n    const [position, setPosition] = useState({ x: 0, y: 0 })\n    const ref = useRef() as any;\n    const [text, setText] = useState(\"Write...\");\n\n    const [blockScroll, allowScroll] = useScrollBlock();\n\n    useEffect(() => {\n        let minus=0;\n        let offset=0;\n        if(startPosition.y>0){\n            offset=50;\n            minus=ref.current.clientHeight;\n        }\n        //set the position of the child in the center of the parent         \n        setPosition({\n            x: (startPosition.x - ref.current.clientWidth) / 2,\n            y: (startPosition.y+offset)-minus\n        });\n    }, [startPosition]);\n\n\n    // Monitor changes to position state and update DOM\n    useEffect(() => {\n        if (ref.current) {\n            ref.current.style.transform = `translate(${position.x}px, ${position.y}px)`\n        }\n    }, [position]);\n\n    useEffect(() => {\n        setText(inputText);\n    }, [inputText]);\n\n    let previousTouch;\n    // Update the current position if mouse is down\n    const onMouseMove = (event) => {\n        if (pressed) {\n\n            switch (event.movementX !== undefined) {\n                case true:\n\n                    setPosition({\n                        x: position.x + event.movementX,\n                        y: position.y + event.movementY\n                    })\n                    break;\n                case false:\n                    var touch = event.touches[0];\n\n                    if (previousTouch) {\n                        event.movementX = touch.pageX - previousTouch.pageX;\n                        event.movementY = touch.pageY - previousTouch.pageY;\n\n                        setPosition({\n                            x: position.x + event.movementX,\n                            y: position.y + event.movementY\n                        })\n                    }\n\n                    previousTouch = touch;\n                    break;\n            }\n        }\n    }\n\n    return (\n        <div\n            className=\"inputTextHolder\"\n            ref={ref}\n            onTouchStart={() => { setPressed(true); blockScroll(); }}\n            onTouchEnd={() => { setPressed(false); allowScroll(); }}\n            onTouchMove={onMouseMove}\n\n            onMouseMove={onMouseMove}\n            onMouseDown={() => setPressed(true)}\n            onMouseUp={() => setPressed(false)}\n            onMouseLeave={() => setPressed(false)}\n        >\n            <h2 className=\"inputText\">{text}</h2>\n\n        </div>\n    );\n}\n\nexport { TextMove };","import React from 'react';\nimport './DragDropStyle.css';\n\nexport type IDragDropImgProps = {\n    loadImg: (e:any) => void;\n}\n\nconst DragDropImg: React.FC<IDragDropImgProps> = ({loadImg}) => {\n\n\n    function handleInputImg(e: any) {\n        loadImg(URL.createObjectURL(e.target.files[0]));\n    }\n\n    return (\n        <div className=\"inputImgHolder\">\n            <label className=\"custom-file-upload\">\n            <input   type=\"file\" onChange={handleInputImg} />\n            <i className=\"inputImg\" style={{padding:\"10px\"}}></i>\n            <i >Custom Upload</i> \n            </label>\n        </div> \n    );\n}\n\nexport { DragDropImg };","import React, { useEffect, useRef, useState } from 'react';\nimport './../../Styles/globstyle.css';\nimport domtoimage from 'dom-to-image';\nimport { Loading } from '../../components/Loading/Loading';\nimport logo from './../../assets/images/rand.jpeg';\nimport { Searchbar } from '../../components/SearchBar/Searchbar';\nimport { Button } from '@mui/material';\nimport { TextMove } from '../../components/TextMove/TextMove';\nimport { DragDropImg } from '../../components/DragDropImg/DragDropImg';\n\nexport type IMemeGeneratorProps = {\n\n}\n\n\nconst MemeGenerator: React.FC<IMemeGeneratorProps> = () => {\n    const [topText, setTopText] = useState(\"\");\n    const [bottomText, setBottomText] = useState(\"\");\n    const [randomImage, setRandomImage] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [allMemeImgs, setAllMemeImgs] = useState([]);\n    const [parentX, setparentX] = useState(0);\n    const [parentY, setparentY] = useState(0);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                let memes = [];\n                memes = response.data.memes.map((data: any) => {\n                    return {\n                        box_count: data.box_count,\n                        height: data.height,\n                        id: Number(data.id),\n                        name: data.name,\n                        url: data.url,\n                        width: data.width\n                    }\n                })\n                setAllMemeImgs(memes);\n                setTimeout(() => {\n                    setLoading(false);\n                }, 1000);\n            })\n    }, []);\n\n    const handleSubmit = (e: any) => {\n        e.preventDefault();\n        domtoimage.toJpeg(document.getElementById('memeForm') as HTMLElement, { quality: 1 })\n            .then((dataUrl) => {\n                const link = document.createElement('a');\n                link.download = 'beniMeme.jpeg';\n                link.href = dataUrl;\n                link.click();\n            });\n    }\n\n    function getSearch(event) {\n        setRandomImage(event.url)\n    }\n\n    function handleInputImg(getImg:string){\n        setRandomImage(getImg);\n    }\n\n    return (\n        <div style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>\n\n            <br />\n            <br />\n            <Searchbar getData={allMemeImgs} setData={getSearch} />\n            <br />\n\n            <form className=\"meme-form\" onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Top\" value={topText} onChange={e => setTopText(e.target.value)} />\n                <input type=\"text\" placeholder=\"Bottom\" value={bottomText} onChange={e => setBottomText(e.target.value)} />\n                <Button variant=\"contained\" type=\"submit\">Download</Button>\n            </form>\n\n            <br />\n            <br />\n\n            <div\n                ref={el => {\n                    if (!el) return;\n                    setparentX(el.getBoundingClientRect().width);\n                    setparentY(el.getBoundingClientRect().height - 50);\n\n                }}\n                className=\"meme\" id=\"memeForm\" >\n\n                <TextMove inputText={topText} startPosition={{ x: parentX, y: 0 }} />\n                <TextMove inputText={bottomText} startPosition={{ x: parentX, y: parentY }} />\n                <img src={randomImage === \"\" ? logo : randomImage} alt=\"Meme\" />\n\n                <br />\n\n\n            </div>\n\n            <div>\n              <DragDropImg loadImg={handleInputImg}/>\n            </div>\n\n            \n            <br />\n\n\n            <Loading isLoading={loading} />\n\n        </div>\n    );\n}\n\nexport { MemeGenerator };","\nimport React from 'react';\nimport './App.css';\nimport { Header } from './components/Header/Header';\nimport { MemeGenerator } from './sites/MemeGenerator/MemeGenerator';\n\ntype IAppProps = {\n\n}\n\nconst App: React.FC<IAppProps> = () => {\n  return (\n    <div>\n      <Header />\n      <div style={{ maxWidth: '700px', margin: '0 auto' }}>\n        <MemeGenerator />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler):void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA"],"sourceRoot":""}