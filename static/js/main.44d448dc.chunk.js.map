{"version":3,"sources":["assets/images/Trollface.png","components/Header/Header.tsx","components/TextMove/Footer/Footer.tsx","components/Loading/Loading.tsx","assets/images/rand.jpeg","components/SearchBar/Searchbar.tsx","services/BlockScroll/UseScrollBlock.ts","components/TextMove/TextMove.tsx","components/DragUpDown/DragUpDown.tsx","components/DragUpDown/ArrowsUpDown.tsx","components/DragDropImg/DragDropImg.tsx","components/Selector/Selector.tsx","components/Selector/SelectorWrapper.tsx","components/ColorPalette/ColorPalette.tsx","sites/MemeGenerator/MemeGenerator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","src","problem","alt","Footer","className","override","css","Loading","isLoading","useState","loading","setLoading","useEffect","color","size","Searchbar","getData","setData","items","setItems","placeholder","onSelect","item","autoFocus","formatResult","styling","safeDocument","document","useScrollBlock","scrollBlocked","useRef","html","documentElement","body","style","current","undefined","scrollBarWidth","window","innerWidth","clientWidth","bodyPaddingRight","parseInt","getComputedStyle","getPropertyValue","position","overflow","paddingRight","TextMove","previousTouch","inputText","startPosition","getFontSize","pressed","setPressed","x","y","setPosition","ref","text","setText","fontSize","setFontSize","blockScroll","allowScroll","parentX","setParentX","Number","toString","minus","offset","clientHeight","transform","onMouseMove","event","movementX","movementY","touch","touches","pageX","pageY","onTouchStart","onTouchEnd","onTouchMove","onMouseDown","onMouseUp","onMouseLeave","DragUpDown","getX","getY","offsetY","getColor","setY","setX","setColor","boxStyle","width","height","backgroundColor","ArrowsUpDown","arrowDrive","DragDropImg","loadImg","type","onChange","e","URL","createObjectURL","target","files","Selector","getLabel","getContent","setSelect","React","label","setLabel","content","setContent","handleChange","value","length","tt","styles","fontFamily","FormControl","fullWidth","variant","InputLabel","Select","labelId","id","map","men","i","MenuItem","SelectorWrapper","ColorPalette","changeColorHex","displayColorPicker","setDisplayColorPicker","r","g","b","a","reactCSS","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","zIndex","cover","top","right","bottom","left","onClick","rgb","hex","MemeGenerator","topText","setTopText","bottomText","setBottomText","randomImage","setRandomImage","allMemeImgs","setAllMemeImgs","setparentX","parentY","setparentY","blackSize","setBlackSize","fetch","then","response","json","memes","data","box_count","name","url","setTimeout","clearInterval","marginLeft","marginRight","onSubmit","preventDefault","domtoimage","toJpeg","getElementById","quality","dataUrl","link","createElement","download","href","click","Button","setSize","el","setInterval","getBoundingClientRect","checkParentSize","logo","getImg","App","maxWidth","margin","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.44d448dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Trollface.c371feba.png\";","import React from 'react';\nimport problem from './../../assets/images/Trollface.png';\n\nexport type IHeaderProps = {\n\n}\n\nconst Header: React.FC<IHeaderProps> = () => {\n    return (\n        <header>\n            <img src={problem} alt=\"Problem?\" /> \n            <p>Meme Generator</p>\n            <small> Beni ©</small>\n        </header>\n    );\n}\n\nexport { Header };","import React from 'react';\nimport './FooterStyle.css';\n\nexport type IFooterProps = {\n    \n}\n\nconst Footer: React.FC<IFooterProps> = () => {\n    return (\n        <div className=\"footerHolder\">\n            \n        </div>\n    );\n}\n\nexport { Footer };","import React, { useEffect, useState } from 'react';\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport { css } from \"@emotion/react\";\nimport './LoadingStyle.css';\n\nexport type ILoadingProps = {\nisLoading:boolean;\n}\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  box-shadow: rgb(255 255 255 / 20%) 0px 3px 29px 0px;\n`;\n\nconst Loading: React.FC<ILoadingProps> = ({isLoading }) => {\n\n    const [loading, setLoading] = useState(isLoading);\n\n    useEffect(() => {\n        setLoading(isLoading);\n    }, [isLoading]);\n\n    return (\n        <div className=\"sweet-loading\">\n            <PacmanLoader color={\"#FBD000\"}  loading={loading} css={override}  size={50} />\n        </div>\n    );\n}\n\nexport { Loading };","export default __webpack_public_path__ + \"static/media/rand.0757221b.jpeg\";","import React, { useEffect, useState } from 'react';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\nimport './SearchStyle.css'\n\nexport type ISearchbarProps = {\n    getData: any;\n    setData: (string) => void;\n}\n\nconst Searchbar: React.FC<ISearchbarProps> = ({ getData, setData }) => {\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        setItems(getData);\n    }, [getData]);\n\n\n    /*     const handleOnSearch = (string, results) => {\n            // onSearch will have as the first callback parameter\n            // the string searched and for the second the results.\n        } */\n\n    /* const handleOnHover = (result) => {\n        // the item hovered\n    } */\n\n    const handleOnSelect = (item) => {\n        // the item selected\n        setData(item);\n    }\n\n    /* const handleOnFocus = () => {\n        // ('Focused')\n    } */\n\n    const formatResult = (item) => {\n        return item;\n        // return (<p dangerouslySetInnerHTML={{__html: '<strong>'+item+'</strong>'}}></p>); //To format result as html\n    }\n\n\n    return (\n        <div>\n            {/* \n             onSearch={handleOnSearch}\n             onHover={handleOnHover}\n               onFocus={handleOnFocus}\n            */}\n            <ReactSearchAutocomplete\n                placeholder=\"Search\"\n                items={items}\n\n                onSelect={handleOnSelect}\n\n                autoFocus\n                formatResult={formatResult}\n                styling={\n                    {\n                        \"lineColor\": \"#48EDDD\",\n                        \"iconColor\": \"#48EDDD\",\n                        \"borderRadius\": \"4px\",\n                        \"boxShadow\": \"none\",\n                        \"zIndex\": \"4\",\n                        \"fontSize\": \"x-large\",\n                        \"fontFamily\": \"VT323, monospace\"\n                    }\n                }\n            />\n        </div>\n    );\n}\n\nexport { Searchbar };","import { useRef } from 'react';\n\nconst safeDocument: Document = document;\n\n/**\n * Usage:\n * const [blockScroll, allowScroll] = useScrollBlock();\n */\nexport const useScrollBlock = (): [() => void, () => void] => {\n\tconst scrollBlocked = useRef(false);\n\tconst html = safeDocument.documentElement;\n\tconst { body } = safeDocument;\n\n\tconst blockScroll = (): void => {\n\t\tif (!body || !body.style || scrollBlocked.current) \n            return;\n        if (document === undefined)\n            return;\n\n\t\tconst scrollBarWidth = window.innerWidth - html.clientWidth;\n\t\tconst bodyPaddingRight = parseInt(window.getComputedStyle(body).getPropertyValue('padding-right')) || 0;\n\n\t\t/**\n\t\t * 1. Fixes a bug in iOS and desktop Safari whereby setting\n\t\t *    `overflow: hidden` on the html/body does not prevent scrolling.\n\t\t * 2. Fixes a bug in desktop Safari where `overflowY` does not prevent\n\t\t *    scroll if an `overflow-x` style is also applied to the body.\n\t\t */\n\t\thtml.style.position = 'relative'; /* [1] */\n\t\thtml.style.overflow = 'hidden'; /* [2] */\n\t\tbody.style.position = 'relative'; /* [1] */\n\t\tbody.style.overflow = 'hidden'; /* [2] */\n\t\tbody.style.paddingRight = `${bodyPaddingRight + scrollBarWidth}px`;\n\n\t\tscrollBlocked.current = true;\n\t};\n\n\tconst allowScroll = (): void => {\n\t\tif (!body || !body.style || !scrollBlocked.current) return;\n\n\t\thtml.style.position = '';\n\t\thtml.style.overflow = '';\n\t\tbody.style.position = '';\n\t\tbody.style.overflow = '';\n\t\tbody.style.paddingRight = '';\n\n\t\tscrollBlocked.current = false;\n\t};\n\n\treturn [blockScroll, allowScroll];\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport './TextMoveStyle.css';\nimport { useScrollBlock } from './../../services/BlockScroll/UseScrollBlock';\n\n\ninterface IPos {\n    x: number;\n    y: number;\n}\n\nexport type ITextMoveProps = {\n    inputText: string;\n    startPosition: IPos;\n    getFontSize: string;\n}\n\n\nconst TextMove: React.FC<ITextMoveProps> = ({ inputText, startPosition, getFontSize }) => {\n\n    const [pressed, setPressed] = useState(false);\n    const [position, setPosition] = useState({ x: 0, y: 0 });\n    const ref = useRef() as any;\n    const [text, setText] = useState(\"Write...\");\n    const [fontSize, setFontSize] = useState(\"2\");\n    const [blockScroll, allowScroll] = useScrollBlock();\n    const [parentX, setParentX] = useState(0);\n\n    useEffect(() => {\n        setParentX(startPosition.x);\n\n        if (parentX < 400 && parentX !== 0) {\n            setFontSize((Number(getFontSize) / 1.5).toString());\n        }\n        else {\n            setFontSize(getFontSize);\n        }\n\n        let minus = 0;\n        let offset = 0;\n        if (startPosition.y > 0) {\n            offset = 50;\n            minus = ref.current.clientHeight;\n        }\n        //set the position of the child in the center of the parent         \n        setPosition({\n            x: (startPosition.x - ref.current.clientWidth) / 2,\n            y: (startPosition.y + offset) - minus\n        });\n    }, [startPosition]);\n\n    // Monitor changes to position state and update DOM\n    useEffect(() => {\n        if (ref.current) {\n            ref.current.style.transform = `translate(${position.x}px, ${position.y}px)`\n        }\n    }, [position]);\n\n    useEffect(() => {\n        setText(inputText);\n    }, [inputText]);\n\n    let previousTouch;\n    const onMouseMove = (event) => {\n        if (pressed) {\n\n            switch (event.movementX !== undefined) {\n                case true:\n\n                    setPosition({\n                        x: position.x + event.movementX,\n                        y: position.y + event.movementY\n                    })\n                    break;\n                case false:\n                    var touch = event.touches[0];\n\n                    if (previousTouch) {\n                        event.movementX = touch.pageX - previousTouch.pageX;\n                        event.movementY = touch.pageY - previousTouch.pageY;\n\n                        setPosition({\n                            x: position.x + event.movementX,\n                            y: position.y + event.movementY\n                        })\n                    }\n\n                    previousTouch = touch;\n                    break;\n            }\n        }\n    }\n\n    return (\n        <div\n            className=\"inputTextHolder\"\n            ref={ref}\n            onTouchStart={() => { setPressed(true); blockScroll(); }}\n            onTouchEnd={() => { setPressed(false); allowScroll(); }}\n            onTouchMove={onMouseMove}\n\n            onMouseMove={onMouseMove}\n            onMouseDown={() => setPressed(true)}\n            onMouseUp={() => setPressed(false)}\n            onMouseLeave={() => setPressed(false)}\n        >\n            <h2 className=\"inputText\" style={{ fontSize: fontSize + \"em\" }}>{text}</h2>\n\n        </div>\n    );\n}\n\nexport { TextMove };","import React, { useEffect, useState } from 'react';\nimport './DragUpDownStyle.css';\n\nexport type IDragUpDownProps = {\n    getX: number;\n    getY: number;\n    offsetY: number;\n    getColor: string;\n}\n\nconst DragUpDown: React.FC<IDragUpDownProps> = ({ getX, getY, offsetY, getColor }) => {\n\n    const [y, setY] = useState(0);\n    const [x, setX] = useState(0);\n    const [color, setColor] = useState(\"#000000\");\n\n    useEffect(() => {\n        setX(getX);\n    }, [getX]);\n\n    useEffect(() => {\n        setY(getY);\n    }, [getY]);\n\n    useEffect(() => {\n        if (typeof (offsetY) === \"number\" && (y >= -30 || offsetY >= 0)) {\n            setY(y + offsetY);\n\n            //remove the line at the end \n            if (offsetY + y < 0) {\n                setY(0)\n            }\n\n        }\n    }, [offsetY]);\n\n    useEffect(() => {\n        setColor(getColor);\n    }, [getColor]);\n\n    const boxStyle = {\n        width: `${x}px`,\n        height: `${y}px`,\n        backgroundColor: color\n    };\n\n    return (\n        <div\n            className=\"UpDownHolder\"\n            style={boxStyle}\n        >\n\n        </div>\n    );\n}\n\nexport { DragUpDown };","import React, { useState } from 'react';\nimport { useScrollBlock } from '../../services/BlockScroll/UseScrollBlock';\nimport './DragUpDownStyle.css';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\n\nexport type IArrowsUpDownProps = {\n    arrowDrive:(e:number)=>void;\n}\n\nconst ArrowsUpDown: React.FC<IArrowsUpDownProps> = ({arrowDrive}) => {\n    const [blockScroll, allowScroll] = useScrollBlock();\n    const [pressed, setPressed] = useState(false);\n\n    let previousTouch;\n    const onMouseMove = (event) => {\n        if (pressed) {\n\n            switch (event.movementX !== undefined) {                \n                case true:\n                    arrowDrive(event.movementY/1.5);\n                    break;\n                case false:\n                    var touch = event.touches[0];\n\n                    if (previousTouch) {\n                        event.movementY = touch.pageY - previousTouch.pageY;\n                        arrowDrive(event.movementY);\n                    }\n\n                    previousTouch = touch;\n                    break;\n            }\n        }\n    }\n    return (\n        <div\n            onTouchStart={() => { setPressed(true); blockScroll(); }}\n            onTouchEnd={() => { setPressed(false); allowScroll(); }}\n            onTouchMove={onMouseMove}\n\n            onMouseMove={onMouseMove}\n            onMouseDown={() => setPressed(true)}\n            onMouseUp={() => setPressed(false)}\n            onMouseLeave={() => setPressed(false)}\n            className=\"UpDownArrowHolder\"\n        >\n            <button className=\"UpDownArrow\" >\n            <ArrowUpwardIcon /><ArrowDownwardIcon />\n            </button>\n        </div>\n    );\n}\n\nexport { ArrowsUpDown };","import React from 'react';\nimport './DragDropStyle.css';\n\nexport type IDragDropImgProps = {\n    loadImg: (e:any) => void;\n}\n\nconst DragDropImg: React.FC<IDragDropImgProps> = ({loadImg}) => {\n\n\n    function handleInputImg(e: any) {\n        loadImg(URL.createObjectURL(e.target.files[0]));\n    }\n\n    return (\n        <div className=\"inputImgHolder\">\n            <label className=\"custom-file-upload\">\n            <input   type=\"file\" onChange={handleInputImg} />\n            <i className=\"inputImg\" ></i>\n            <i className=\"inputText\">Custom Upload</i> \n            </label>\n        </div> \n    );\n}\n\nexport { DragDropImg };","import { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport React, { useEffect } from 'react';\nimport './SelectorStyle.css';\n\nexport type IContent = {\n    value: number;\n    content: string;\n}\n\nexport type ISelectorProps = {\n    getLabel: string;\n    getContent: IContent[];\n    setSelect: (e: IContent) => void;\n}\n\nconst Selector: React.FC<ISelectorProps> = ({ getLabel, getContent, setSelect }) => {\n    const [label, setLabel] = React.useState('');\n    const [content, setContent] = React.useState([{}] as IContent[]);\n\n    const handleChange = (e: any) => {\n        setLabel(e.target.value);\n        setSelect(e);\n    };\n\n    useEffect(() => {\n        setContent(getContent);\n        if (content[0].value !== undefined && label.length === 0) {\n            setLabel(content[1].value.toString());\n            const tt = { target: content[1] }\n            handleChange(tt)\n        }\n    }, [getContent]);\n\n    const styles = { fontFamily: \"VT323, monospace\" }\n\n    return (\n        <div className=\"SelectHolder\">\n\n            <FormControl fullWidth variant=\"outlined\">\n                <InputLabel style={styles} >{getLabel}</InputLabel>\n                <Select\n                    style={styles}\n                    labelId=\"selector\"\n                    id=\"selector\"\n                    value={label}\n                    label={getLabel}\n                    onChange={handleChange}\n                >\n                    {content.map((men, i) =>\n                        <MenuItem style={styles} key={i} value={men.value}>{men.content}</MenuItem>\n                    )}\n\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\nexport { Selector };\n\n\n","import React from 'react';\nimport { IContent, Selector } from './Selector';\n\nexport type ISelectorWrapperProps = {\n    setSelect:(e:IContent)=>void;\n}\n\n\nconst SelectorWrapper: React.FC<ISelectorWrapperProps> = ({setSelect}) => {\n    const cont: IContent[] = [\n\n        { value: 1, content: \"small\" },\n        { value: 2, content: \"medium\" },\n        { value: 3, content: \"large\" }\n    ];\n\n\n    \n    return (\n        <div>\n            <Selector setSelect={setSelect} getLabel={\"Font Size\"} getContent={cont} />\n        </div>\n    );\n}\n\nexport { SelectorWrapper };","import React, { useState } from 'react';\nimport './ColorPaletteStyle.css';\nimport reactCSS from 'reactcss';\nimport { SketchPicker } from 'react-color';\n\nexport type IColorPaletteProps = {\n    changeColorHex: (e: string) => void;\n}\n\nconst ColorPalette: React.FC<IColorPaletteProps> = ({changeColorHex}) => {\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\n\n    const [color, setColor] = useState({\n        r: '0',\n        g: '0',\n        b: '0',\n        a: '1',\n    });\n\n    const handleClick = () => {\n        setDisplayColorPicker(!displayColorPicker);\n    };\n\n    const handleClose = () => {\n        setDisplayColorPicker(false);\n    };\n\n    const handleChange = (color) => {\n        setColor(color.rgb);\n        changeColorHex(color.hex);\n    };\n\n\n    const styles = reactCSS({\n        'default': {\n            color: {\n                width: '36px',\n                height: '14px',\n                borderRadius: '2px',\n                background: `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`,\n            },\n            swatch: {\n                padding: '5px',\n                background: '#fff',\n                borderRadius: '1px',\n                boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                display: 'inline-block',\n                cursor: 'pointer',\n            },\n            popover: {\n                position: 'absolute',\n                zIndex: '2',\n            },\n            cover: {\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                left: '0px',\n            },\n        },\n    });\n\n\n    return (\n        <div>\n            <div style={styles.swatch} onClick={handleClick}>\n                <div style={styles.color} />\n            </div>\n            {displayColorPicker ? <div style={styles.popover}>\n                <div style={styles.cover} onClick={handleClose} />\n                <SketchPicker color={color} onChange={handleChange} />\n            </div> : null}\n        </div>\n    );\n}\n\nexport { ColorPalette };","import React, { useEffect, useState } from 'react';\nimport './../../Styles/globstyle.css';\nimport domtoimage from 'dom-to-image';\nimport { Loading } from '../../components/Loading/Loading';\nimport logo from './../../assets/images/rand.jpeg';\nimport { Searchbar } from '../../components/SearchBar/Searchbar';\nimport { Button } from '@mui/material';\nimport { TextMove } from '../../components/TextMove/TextMove';\nimport { DragUpDown } from '../../components/DragUpDown/DragUpDown';\nimport { ArrowsUpDown } from '../../components/DragUpDown/ArrowsUpDown';\nimport { DragDropImg } from '../../components/DragDropImg/DragDropImg';\nimport { SelectorWrapper } from '../../components/Selector/SelectorWrapper';\nimport { ColorPalette } from '../../components/ColorPalette/ColorPalette';\n\nexport type IMemeGeneratorProps = {\n\n}\n\n\nconst MemeGenerator: React.FC<IMemeGeneratorProps> = () => {\n    const [topText, setTopText] = useState(\"\");\n    const [bottomText, setBottomText] = useState(\"\");\n    const [randomImage, setRandomImage] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [allMemeImgs, setAllMemeImgs] = useState([]);\n    const [parentX, setparentX] = useState(0);\n    const [parentY, setparentY] = useState(0);\n    const [blackSize, setBlackSize] = useState(0);\n    const [fontSize, setFontSize] = useState(\"1\");\n    const [color, setColor] = useState(\"#000000\");\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                let memes = [];\n                memes = response.data.memes.map((data: any) => {\n                    return {\n                        box_count: data.box_count,\n                        height: data.height,\n                        id: Number(data.id),\n                        name: data.name,\n                        url: data.url,\n                        width: data.width\n                    }\n                })\n                setAllMemeImgs(memes);\n                setTimeout(() => {\n                    setLoading(false);\n                }, 1000);\n            })\n    }, []);\n\n    useEffect(() => {\n        return () => clearInterval();\n    });\n\n    const handleSubmit = (e: any) => {\n        e.preventDefault();\n        domtoimage.toJpeg(document.getElementById('memeForm') as HTMLElement, { quality: 1 })\n            .then((dataUrl) => {\n                const link = document.createElement('a');\n                link.download = 'beniMeme.jpeg';\n                link.href = dataUrl;\n                link.click();\n            });\n    }\n\n    function getSearch(event) {\n        setRandomImage(event.url)\n    }\n\n    function arrowMoved(e: number) {\n        setBlackSize(e);\n    }\n\n    function checkParentSize(el) {\n        if (!el) return;\n        setInterval(() => {\n            setparentX(el.getBoundingClientRect().width);\n            setparentY(el.getBoundingClientRect().height - 50);\n        }, 400);\n    }\n\n    function handleInputImg(getImg: string) {\n        setRandomImage(getImg);\n    }\n\n    function setSize(e: any) {\n        setFontSize(e.target.value.toString());\n    }\n\n    function changeColor(e: string) {\n        setColor(e);\n    }\n\n\n    return (\n        <div style={{ marginLeft: \"10px\", marginRight: \"10px\" }}>\n\n            <br />\n            <br />\n            <Searchbar getData={allMemeImgs} setData={getSearch} />\n            <br />\n\n            <form className=\"meme-form\" onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Top\" value={topText} onChange={e => setTopText(e.target.value)} />\n                <input type=\"text\" placeholder=\"Bottom\" value={bottomText} onChange={e => setBottomText(e.target.value)} />\n                <Button variant=\"contained\" type=\"submit\">Download</Button>\n            </form>\n\n            <br />\n\n            <SelectorWrapper setSelect={(e) => setSize(e)} />\n\n            <br />\n            <br />\n\n            <ColorPalette changeColorHex={changeColor} />\n\n            <div\n                ref={el => { checkParentSize(el) }}\n                className=\"meme\" id=\"memeForm\" >\n\n                <TextMove getFontSize={fontSize} inputText={topText} startPosition={{ x: parentX, y: 0 }} />\n                <TextMove getFontSize={fontSize} inputText={bottomText} startPosition={{ x: parentX, y: parentY }} />\n\n                <DragUpDown getX={Number(parentX)} getY={0} offsetY={Number(blackSize)} getColor={color} />\n\n                <img style={{ display: 'block' }} src={randomImage === \"\" ? logo : randomImage} alt=\"Meme\" />\n                <DragUpDown getX={Number(parentX)} getY={0} offsetY={Number(blackSize)} getColor={color.toString()} />\n\n            </div>\n\n            <ArrowsUpDown arrowDrive={arrowMoved} />\n            <br />\n            <br />\n            <DragDropImg loadImg={handleInputImg} />\n            <Loading isLoading={loading} />\n\n\n        </div>\n    );\n}\n\nexport { MemeGenerator };","\nimport React from 'react';\nimport './App.css';\nimport { Header } from './components/Header/Header';\nimport { Footer } from './components/TextMove/Footer/Footer';\nimport { MemeGenerator } from './sites/MemeGenerator/MemeGenerator';\n\ntype IAppProps = {\n\n}\n\nconst App: React.FC<IAppProps> = () => {\n  return (\n    <div>\n      <Header />\n      <div style={{ maxWidth: '700px', margin: '0 auto' }}>\n        <MemeGenerator />\n      </div>\n      <div style={{marginTop:\"30px\"}}>\n      <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler):void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA"],"sourceRoot":""}